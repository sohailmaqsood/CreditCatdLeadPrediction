# -*- coding: utf-8 -*-
"""Credit Card Lead - Analytics Vidhya

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U-IywcpGXVqbvzm5gqeNTJrdv6PrYWOa

**Problem statement can be found on this link-** https://datahack.analyticsvidhya.com/contest/job-a-thon-2/?utm_source=Blog&utm_medium=popup#LeaderBoard
"""

#importing the required libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#load data from file to dataframe

test = pd.read_csv('test.csv')
train = pd.read_csv('train.csv')

#keeping copy of original dataframes for future

test_orig = test.copy()
train_orig = train.copy()

#data preview

train.head()

train.info()

#check for missing values
train.isnull().sum()

"""*We don't see any missing values columns except,* **Credit Product** which has 29325 missing values"""

#Similarly lets check missing values in test dataset
test.isnull().sum()

train.info()

train.dtypes

#let check the distribution of age columns

sns.distplot(train['Age'],hist=True,bins=16)

"""Highest number of customers being in the age group of 25-30"""

bins = [i for i in range(15,100,5)]
train['age_group'] = pd.cut(train['Age'],bins=bins)
train.drop(['Age'],axis=1,inplace=True)

#Similarly for test dataset
test['age_group'] = pd.cut(test['Age'],bins=bins)
test.drop(['Age'],axis=1,inplace=True)

train['age_group'].value_counts().plot.bar()

#similarly, lets replace Yes/No in Credit Product and Is Active column
train['Credit_Product'].replace(['Yes','No'],[1,0],inplace=True)
train['Is_Active'].replace(['Yes','No'],[1,0],inplace=True)

#same for Test set
test['Credit_Product'].replace(['Yes','No'],[1,0],inplace=True)
test['Is_Active'].replace(['Yes','No'],[1,0],inplace=True)

#lets check the column distribution for all categorical columns
plt.figure(1)
plt.subplot(231)
plt.subplots_adjust(hspace=0.5)
train['Gender'].value_counts(normalize=True).plot.bar(figsize=(20,10),title='Gender')
plt.subplot(232)
train['Region_Code'].value_counts(normalize=True).plot.bar(title='Region Code')
plt.subplot(233)
train['Occupation'].value_counts(normalize=True).plot.bar(title='Occupation')
plt.subplot(234)
train['Channel_Code'].value_counts(normalize=True).plot.bar(title='Channel Code')
plt.subplot(235)
train['Credit_Product'].value_counts(normalize=True).plot.bar(title='Credit Product')
plt.subplot(236)
train['Is_Active'].value_counts(normalize=True).plot.bar(title='Is Active')

#checking the independent column distribution as well

train['Is_Lead'].value_counts(normalize=False).plot.bar()

"""Data is highly imbalance"""

#lets check the relation between Credit Product and Is_lead column

crd_prd = pd.crosstab(train['Credit_Product'],train['Is_Lead'])
crd_prd.div(crd_prd.sum(1).astype(float),axis=0).plot.bar(stacked=True)

"""Around 70% of customers does not have any Credit product. At the same time, it looks like people who already has any credit product, are more interested in getting a credit card"""

#lets drop the null values
#train.dropna(inplace=True)
#dropping null values is resulting in loss of 50% of yes values, in already imbalanced data
#so dropping null values is not an option

#lets check the value distribution for Average Account balance column
sns.distplot(train['Avg_Account_Balance'],hist=True)

#lets check for outlines in Average Account Balance Column
plt.figure(figsize=(5,10))
plt.boxplot(train['Avg_Account_Balance'])

"""Average Account Balance has so many outliers

"""

plt.figure(figsize=(5,10))
sns.boxplot(y=train['Avg_Account_Balance'],x=train['Is_Lead'])

"""Since presence of outliers is almost same for both case (0/1), we will leave the outliers as is"""

train.skew(axis = 0)

"""Above cell also shows the presence of Skewness in Average Account Balance column"""

#using Log to reduce the bring the skewed values under normal distribution
train['log_avg_bal'] = np.log(train['Avg_Account_Balance'])
train['Vintage_log'] = np.log(train['Vintage'])

#similar for test dataset
test['log_avg_bal'] = np.log(test['Avg_Account_Balance'])
test['Vintage_log'] = np.log(test['Vintage'])

#removing the original columns
train.drop(['Avg_Account_Balance','Vintage'],axis=1,inplace=True)
test.drop(['Avg_Account_Balance','Vintage'],axis=1,inplace=True)

#lets split and fill the missing value for Credit Product column
train['Credit_Product'].fillna(value=1.0,inplace=True)

#same for test dataset
test['Credit_Product'].fillna(value=1.0,inplace=True)

#splitting away dependent and independent variables
x = train.iloc[:,[0,1,2,3,4,5,6,8,9,10]]
y = train.iloc[:,7]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25)

x_train.drop(['ID'],axis=1,inplace=True)
x_test.drop(['ID'],axis=1,inplace=True)

test.drop(['ID'],axis=1,inplace=True)

x_train.head()

x_test = pd.get_dummies(x_test)

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(class_weight='balanced')
classifier.fit(x_train,y_train)

y_pred = classifier.predict(x_test)

from sklearn.metrics import roc_auc_score
print(roc_auc_score(y_test,y_pred))

test = pd.get_dummies(test)

test_pred = classifier.predict(test)

submission = pd.read_csv('sample_submission.csv')

submission.drop(['ID','Is_Lead'],axis=1,inplace=True)

submission['ID'] = test_orig['ID']

submission['Is_Lead'] = test_pred

submission.info()

submission.to_csv('submissionfile.csv',index=False)

